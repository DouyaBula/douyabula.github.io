{"pages":[{"title":"about","text":"Welcome.","link":"/about/index.html"}],"posts":[{"title":"Digital Design and Computer Architecture 第一章归纳","text":"0 前言笔记主要是对教材的关键部分进行摘录并归类，方便以后查阅。 1 研究方法 Abstraction（抽象） The critical technique for managing complexity is abstraction: hiding details when they are not important. A system can be viewed from many different levels of abstraction. Discipline（标准） Discipline is the act of intentionally restricting your design choices so that you can work more productively at a higher level of abstraction. The Three-Y’s（三原则） Designers use the three “-y’s” to manage complexity: hierarchy, modularity, and regularity. Hierarchy involves dividing a system into modules, then further sub-dividing each of these modules until the pieces are easy to understand. Modularity states that the modules have well-defined functions and interfaces, so that they connect together easily without unanticipated side effects. Regularity seeks uniformity among the modules. Common modules are reused many times, reducing the number of distinct modules that must be designed. 2 数制Bits, Bytes, Nibbles The amount of information D in a discrete valued variable with N distinct states is measured in units of bits as: $$D=log_2N\\space\\space\\space bits$$ A group of eight bits is called a byte. A group of four bits, or half a byte, is called a nibble. Microprocessors handle data in chunks called words. The size of a word depends on the architecture of the microprocessor. Within a group of bits, the bit in the 1’s column is called the least significant bit (lsb), and the bit at the other end is called the most significant bit (msb). Similarly, within a word, the bytes are identified as least significant byte (LSB) through most significant byte (MSB). Some Number Systems Decimal Numbers Base: 10. Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. Binary Numbers Base:2. Digits:0, 1. Hexadecimal Numbers Base: 16. Digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Signed Binary Numbers SignMagnitude Numbers An N-bit signmagnitude number uses the most significant bit as the sign and the remaining N−1 bits as the magnitude (absolute value). A sign bit of 0 indicates positive and a sign bit of 1 indicates negative. Two’s Complement Numbers Two’s complement numbers are identical to unsigned binary numbers except that the most significant bit position has a weight of $-2^{N-1}$ instead of $2^{N-1}$. Taking the two’s complement: The sign of a two’s complement number is reversed in a process called taking the two’s complement. The process consists of inverting all of the bits in the number, then adding 1 to the least significant bit position. This is useful to find the representation of a negative number or to determine the magnitude of a negative number. 3 逻辑门Some Logic Gates AND Buffer NOT OR NAND NOR XOR 4 数字抽象之下Basic Concepts Suppose the lowest voltage in the system is 0 V, also called ground or GND. The highest voltage in the system comes from the power supply and is usually called $\\bf{V_{DD}}$. The mapping of a continuous variable onto a discrete binary variable is done by defining logic levels. The noise margin is the amount of noise that could be added to a worst-case output such that the signal can still be interpreted as a valid input. DC Transfer CharacteristicsThe DC transfer characteristics of a gate describe the output voltage as a function of the input voltage when the input is changed slowly enough that the output can keep up. A reasonable place to choose the logic levels is where the slope of the transfer characteristic $\\frac{dY}{dA}$ is −1. These two points are called the unity gain points. Choosing logic levels at the unity gain points usually maximizes the noise margins. 5 CMOS晶体管Basic Gadgets Semiconductors The electron carries a negative charge, so we call arsenic an n-type dopant. The hole is a lack of negative charge, so it acts like a positively charged particle. Hence, we call boron a p-type dopant. Diodes The junction between p-type and n-type silicon is called a diode. The p-type region is called the anode and the n-type region is called the cathode. When the voltage on the anode rises above the voltage on the cathode, the diode is forward biased. When the anode voltage is lower than the voltage on the cathode, the diode is reverse biased. Capacitors A capacitor consists of two conductors separated by an insulator. nMOS and pMOS TransistorsThere are two flavors of MOSFETs: nMOS and pMOS. CMOS GatesThese processes that provide both flavors of transistors are called Complementary MOS or CMOS. Some CMOS Gates NOT NAND Transmission Gate The general form used to construct any inverting logic gate: In a properly functioning logic gate, one of the networks should be ON and the other OFF at any given time, so that the output is pulled HIGH or LOW but not shorted or floating. We can guarantee this by using the rule of conduction complements. When nMOS transistors are in series, the pMOS transistors must be in parallel. When nMOS transistors are in parallel, the pMOS transistors must be in series. Pseudo-nMOS LogicPseudo-nMOS logic replaces the slow stack of pMOS transistors with a single weak pMOS transistor that is always ON. Power Consumption$$P_{dynamic}=\\frac{1}{2}CV_{DD}^2f$$ $$P_{static}=I_{DD}V_{DD}$$","link":"/2022/07/18/Digital-Design-and-Computer-Architecture-%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%BD%92%E7%BA%B3/"},{"title":"Digital-Design-and-Computer-Architecture-第五章归纳","text":"0 前言这一章学习了小数的二进制表示，一些更复杂的blocks，对之前的很多内容做了拓展和补充。 1 Number SystemsFixed-Point NumberFixed-point notation has an implied binary point between the integer and fraction bits, analogous to the decimal point between the integer and fraction digits of an ordinary decimal number. There is no way of knowing the existence of the binary point except through agreement of those people interpreting the number. Floating-Point Number SystemsSign: 0+, 1-. Biased Exponent: Original exponent +127. (32bit) Fraction: The first bit of mantissa is erased. Special Cases Formats Rounding The rounding modes are: round down, round up, round toward zero, and round to nearest. The default rounding mode is round to nearest. A number overflows to $\\pm \\infty$ when its magnitude is too large to be represented. Likewise, a number underflows to $0$ when it is too tiny to be represented. Floating-Point Addition Extract exponent and fraction bits. Prepend leading 1 to form the mantissa. Compare exponents. Shift smaller mantissa if necessary. Add mantissas. Normalize mantissa and adjust exponent if necessary. Round result. Assemble exponent and fraction back into floating-point number. 2 Arithmetic CircuitsAdditionHalf Adder Full Adder Ripple Carry Adder Carry Lookahead Adder (CLA)$$G_i=A_iB_i\\P_i=A_i+B_i\\C_i=G_i+P_iC_{i-1}$$ As for multiple-bit occasions,$$G_{i:j}=C_i\\P_{i:j}=\\prod_{k=i}^jP_k\\C_{i:j}=G_{i:j}+P_{i:j}C_{in}$$ Prefix AdderThey first compute G and P for pairs of columns, then for blocks of 4, then for blocks of 8, then 16, and so forth until the generate signal for every column is known. The sums are computed from these generate signals. SubtractionSubtraction is almost as easy: flip the sign of the second number, then add. ComparatorsEquality ComparatorMagnitude ComparatorMagnitude comparison is usually done by computing A − B and looking at the sign (most significant bit) of the result as shown in Figure 5.12. Arithmetic/Logical Unit (ALU) Shifters Multiplication Division略 3 Sequential Building BlocksCounter 12345678module counter #(parameter N=8) (input clk, rst output [N-1:0] q); always@(posedge clk,posedge rst) begin if (rst) q&lt;=4'b0000; else q&lt;=q+1; endendmodule Shift Register 123456789101112module shiftReg #(parameter N=8) (input [N-1:0]d, input clk,load,rst,sin, output [N-1:0] q, output sout) always@(posedge clk,posedge rst) begin if(rst) q&lt;=0; else if(load) q&lt;=d; else q&lt;={q[N-2:0],sin}; end assign sout=q[N-1];endmodule Scan Chains 4 Memory Arrays Memories are classified based on how they store bits in the bit cell. The broadest classification is random access memory (RAM) versus read only memory (ROM). RAM is volatile, meaning that it loses its data when the power is turned off. ROM is nonvolatile, meaning that it retains its data indefinitely, even without a power source. RAM and ROM received their names for historical reasons that are no longer very meaningful. DRAM SRAM ROM 12345678910module RAM #(parameter N=6, M=32) (input clk, we, input [M-1:0] adr,din, output [M-1:0] dout) reg [M-1:0] mem [2**N-1:0]; always@(posedge clk) begin if(we) mem[adr]&lt;=din; end assign dout=mem[adr];endmodule PROMFuse-programmable ROM Memory arrays used to perform logic are called lookup tables (LUTs). 5 Logic ArraysPLA FPGAFPGAs are built as an array of configurable logic elements (LEs), also referred to as configurable logic blocks (CLBs). Each LE can be configured to perform combinational or sequential functions. The LEs are surrounded by input/output elements (IOEs) for interfacing with the outside world. 6 Array ImplementationsRefer to Chapter 1.","link":"/2022/09/03/Digital-Design-and-Computer-Architecture-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%BD%92%E7%BA%B3/"},{"title":"Digital Design and Computer Architecture 第二章归纳","text":"0 前言这一章的布尔方程和布尔代数部分在离散里已经学过了，但是讲的比离散课本好十万甚至九万倍。 Timing部分在数据结构的图里学过。 1 基本概念CircuitIn digital electronics, a circuit is a network that processes discrete-valued variables. A circuit can be viewed as a black box, shown in Figure 2.1, with one or more discrete-valued input terminals one or more discrete-valued output terminals a functional specification describing the relationship between inputs and outputs a timing specification describing the delay between inputs changing and outputs responding. Circuits are composed of nodes and elements. An element is itself a circuit with inputs, outputs, and a specification. A node is a wire, whose voltage conveys a discrete-valued variable. Nodes are classified as input, output, or internal. Inputs receive values from the external world. Outputs deliver values to the external world. Wires that are not inputs or outputs are called internal nodes. Nodes A, B, and C are inputs. Y and Z are outputs. n1 is an internal node between E1 and E3. Combinational and Sequential Circuits A combinational circuit’s outputs depend only on the current values of the inputs. A sequential circuit’s outputs depend on both current and previous values of the inputs. To simplify drawings, we often use a single line with a slash through it and a number next to it to indicate a bus, a bundle of multiple signals. If the number of bits is unimportant or obvious from the context, the slash may be shown without a number. The symbol $C\\L$ inside the box indicates that it is implemented using only combinational logic. The rules of combinational compositionA circuit is combinational if it consists of interconnected circuit elements such that Every circuit element is itself combinational. Every node of the circuit is either designated as an input to the circuit or connects to exactly one output terminal of a circuit element. The circuit contains no cyclic paths: every path through the circuit visits each circuit node at most once. 2 布尔方程与布尔代数Terminology The complement of a variable $A$ is its inverse $\\overline{A}$. We call A the true form of the variable and A the complementary form. The variable or its complement is called a literal. The AND of one or more literals is called a product or an implicant. An implicant is called a prime implicant if it cannot be combined with any other implicants in the equation to form a new implicant with fewer literals. A minterm is a product involving all of the inputs to the function. The OR of one or more literals is called a sum. A maxterm is a sum involving all of the inputs to the function. Order of operations: NOT &gt; AND &gt; OR. Sum-of-products FormSum-of-products canonical form is a Boolean equation for any truth table by summing each of the minterms for which the output is TRUE. Product-of-Sums FormProduct-of-sums canonical form is a Boolean equation for any truth table by multiplying each of the maxterms for which the output is FALSE. Attention: Sum-of-products and product-of-sums form do not necessarily generate the simplest equation. Axioms Theorems 3 构建组合逻辑电路Rules for bubble pushingAccording to the theorems, the underlying rules for bubble pushing are Pushing bubbles backward (from the output) or forward (from the inputs) changes the body of the gate from AND to OR or vice versa. Pushing a bubble from the output back to the inputs puts bubbles on all gate inputs. Pushing bubbles on all gate inputs forward toward the output puts a bubble on the output. Drawing SchematicsA schematic is a diagram of a digital circuit showing the elements and the wires that connect them together. By drawing schematics in a consistent fashion, we make them easier to read and debug. We will generally obey the following guidelines: Inputs are on the left (or top) side of a schematic. Outputs are on the right (or bottom) side of a schematic. Whenever possible, gates should flow from left to right. Straight wires are better to use than wires with multiple corners (jagged wires waste mental effort following the wire rather than thinking of what the circuit does). Wires always connect at a T junction. A dot where wires cross indicates a connection between the wires. Wires crossing without a dot make no connection. Priority Circuit We use the symbol X to describe inputs that the output doesn’t care about. Bubble Pushing The guidelines for bubble pushing are as follows: Begin at the output of the circuit and work toward the inputs. Push any bubbles on the final output back toward the inputs so that you can read an equation in terms of the output (for example, $Y$) instead of the complement of the output $\\overline Y$. Working backward, draw each gate in a form so that bubbles cancel. If the current gate has an input bubble, draw the preceding gate with an output bubble. If the current gate does not have an input bubble, draw the preceding gate without an output bubble. Illegal Value and Floating ValueThe symbol X indicates that the circuit node has an unknown or illegal value. This commonly happens if it is being driven to both 0 and 1 at the same time. The symbol Z indicates that a node is being driven neither HIGH nor LOW. The node is said to be floating, high impedance, or high Z. A floating node might be 0, might be 1, or might be at some voltage in between, depending on the history of the system. The tristate buffer, shown in Figure 2.40, has three possible output states: HIGH (1), LOW (0), and floating (Z). 4 卡诺图Karnaugh maps (K-maps) are a graphical method for simplifying Boolean equations. Adjacent squares share all the same literals except one, which appears in true form in one square and in complementary form in the other. You may have noticed that the A and B combinations in the top row are in a peculiar order: 00, 01, 11, 10. This order is called a Gray code. The K-map also “wraps around.” Logic Minimization with K-MapsK-maps provide an easy visual way to minimize logic. Rules for finding a minimized equation from a K-map are as follows: Use the fewest circles necessary to cover all the 1’s. All the squares in each circle must contain 1’s. Each circle must span a rectangular block that is a power of 2 (i.e., 1, 2, or 4) squares in each direction. Each circle should be as large as possible. A circle may wrap around the edges of the K-map. A 1 in a K-map may be circled multiple times if doing so allows fewer circles to be used. Seven-segment Display Decoder Don‘t CaresDon’t cares also appear in truth table outputs where the output value is unimportant or the corresponding input combination can never happen. Such outputs can be treated as either 0’s or 1’s at the designer’s discretion. 5 组合逻辑模块Multiplexers Multiplexer LogicMultiplexers can be used as lookup tables to perform logic functions. In general, a $2^N$-input multiplexer can be programmed to perform any N-input logic function by applying 0’s and 1’s to the appropriate data inputs. With a little cleverness, we can cut the multiplexer size in half, using only a $2^{N-1}$-input multiplexer to perform any N-input logic function. Decoder Decoder LogicWhen using decoders to build logic, it is easiest to express functions as a truth table or in canonical sum-of-products form. An N-input function with M 1’s in the truth table can be built with an N:2N decoder and an M-input OR gate attached to all of the minterms containing 1’s in the truth table. 5 TimingPropagation and Contamination DelayThe propagation delay $t_{pd}$ is the maximum time from when an input changes until the output or outputs reach their final value. The contamination delay $t_{cd}$ is the minimum time from when an input changes until any output starts to change its value. Critical Path and Short PathThe critical path limits the speed at which the circuit operates. The short path is the fastest path through the circuit. The propagation delay of a combinational circuit is the sum of the propagation delays through each element on the critical path. The contamination delay is the sum of the contamination delays through each element on the short path. GlitchesIt is possible that a single input transition can cause multiple output transitions. These are called glitches or hazards. In general, a glitch can occur when a change in a single variable crosses the boundary between two prime implicants in a K-map. We can eliminate the glitch by adding redundant implicants to the K-map to cover these boundaries. This of course comes at the cost of extra hardware. However, simultaneous transitions on multiple inputs can also cause glitches. These glitches cannot be fixed by adding hardware.","link":"/2022/07/22/Digital-Design-and-Computer-Architecture-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%BD%92%E7%BA%B3/"},{"title":"Digital Design and Computer Architecture 第三章归纳","text":"0 前言这一章学习Sequential Logic。首先学习几个基本元件，接着学习有限状态机，最后学习Timing分析。其中穿插了设计电路的原则和提高电路效率的方法。 从这篇笔记开始简化内容，一些直觉上认为不重要的内容就略过了。我是懒狗。 1 时序逻辑模块Bistable ElementThe fundamental building block of memory is a bistable element, an element with two stable states. SR Latch D LatchThe data input, D, controls what the next state should be. The clock input, CLK, controls when the state should change. D Flip-FlopA D flip-flop copies D to Q on the rising edge of the clock, and remembers its state at all other times. The term flip-flop or latch by itself usually refers to a D flip-flop or D latch, respectively, because these are the types most commonly used in practice. RegisterAn N-bit register is a bank of N flip-flops that share a common CLK input, so that all bits of the register are updated at the same time. Enabled Flip-FlopAn enabled flip-flop adds another input called EN or ENABLE to determine whether data is loaded on the clock edge. Resettable Flip-FlopA resettable flip-flop adds another input called RESET. When RESET is FALSE, the resettable flip-flop behaves like an ordinary D flip-flop. When RESET is TRUE, the resettable flip-flop ignores D and resets the output to 0. Such flip-flops may be synchronously or asynchronously resettable. Transistors-Level Designs 2 设计原则Definition of a Synchronous Sequential CircuitA circuit is a synchronous sequential circuit if it consists of interconnected circuit elements such that Every circuit element is either a register or a combinational circuit At least one circuit element is a register All registers receive the same clock signal Every cyclic path contains at least one register. Sequential circuits that are not synchronous are called asynchronous. Asynchronous design in theory is more general than synchronous design, because the timing of the system is not limited by clocked registers. However, synchronous circuits have proved to be easier to design and use than asynchronous circuits 3 有限状态机DefinitionSynchronous sequential circuits can be drawn in the forms shown in Figure 3.22. These forms are called finite state machines (FSMs). They get their name because a circuit with k registers can be in one of a finite number ($2^k$) of unique states. In Moore machines, the outputs depend only on the current state of the machine. In Mealy machines, the outputs depend on both the current state and the current inputs. ExamplesA controller for a traffic light （Moore Machine） State transition diagram State transition table Encodings Boolean Equations$$S’_1=\\bar{S_1}S_0+S_1\\bar{S_0}\\bar{T_B}+S_1\\bar{S_0}T_B\\S’_0=\\bar{S_1}\\bar{S_2}\\bar{T_A}+S_1\\bar{S_0}\\bar{T_B}$$ Simplify it. $$S’_1=S_1\\oplus S_0\\S’_0=\\bar{S_1}\\bar{S_2}\\bar{T_A}+S_1\\bar{S_0}\\bar{T_B}$$ Similarly, get the output equations. $$L_{A1}=S_1\\L_{A0}=\\bar{S_1}S_0\\L_{B1}=\\bar{S_1}\\L_{B0}=S_1S_0$$ Draw the diagram Mealy MachineThe snail crawls from left to right along a paper tape containing a sequence of 1’s and 0’s. On each clock cycle, the snail crawls to the next bit. The snail smiles when the last two bits that it has crawled over are, from left to right, 01. Design the FSM to compute when the snail should smile. Factoring State Machines Encoding patterns With binary encoding, as was used in the traffic light controller example, each state is represented as a binary number. In one-hot encoding, a separate bit of state is used for each state. A different choice would have resulted in a different circuit. Deriving an FSM from a SchematicDeriving the state transition diagram from a schematic follows nearly the reverse process of FSM design. Examine circuit, stating inputs, outputs, and state bits. Write next state and output equations. Create next state and output tables. Reduce the next state table to eliminate unreachable states. Assign each valid state bit combination a name. Rewrite next state and output tables with state names. Draw state transition diagram. State in words what the FSM does. 4 TimingThe Dynamic DisciplineThe sum of the setup and hold times is called the aperture time of the circuit, because it is the total time for which the input must remain stable. 拓展阅读： 为什么会有建立时间(setup time)和保持时间(hold time)要求? https://zhuanlan.zhihu.com/p/269274800 网页备份： https://pan.baidu.com/s/1Rv0rat9MAu3v6H48-Mrc7A?pwd=fbbg Setup Time Constraint$$t_{pd}\\leq T_C-(t_{pcq}+t_{setup})$$ This equation is called the setup time constraint or max-delay constraint. Hold Time Constraint$$t_{cd}\\geq t_{hold}-t_{cq}$$ This is also called the hold time constraint or min-delay constraint. Clock SkewIn the previous analysis, we assumed that the clock reaches all registers at exactly the same time. In reality, there is some variation in this time. This variation in clock edges is called clock skew. MetastabilityWhen a flip-flop samples an input that is changing during its aperture, the output Q may momentarily take on a voltage between 0 and $V_{DD}$ that is in the forbidden zone. This is called a metastable state.$$P(t_{res}&gt;t)=\\frac{T_0}{T_c}e^{-\\frac{t}{\\tau}}$$公式推导略。 $T_c$ is the clock period, and $T_0$ and $\\tau$ are characteristic of the flip-flop. The equation is valid only for t substantially longer than $t_{pcq}$. SynchronizersTo guarantee good logic levels, all asynchronous inputs should be passed through synchronizers. $$P(failure)=\\frac{T_0}{T_c}e^{-\\frac{T_c-t_{setup}}{\\tau}}$$If D changes N times per second:$$P(failure)/sec=N\\frac{T_0}{T_c}e^{-\\frac{T_c-t_{setup}}{\\tau}}$$System reliability is usually measured in mean time between failures (MTBF):$$MTBF=\\frac{1}{P(failure)/sec}=\\frac{T_ce^{-\\frac{T_c-t_{setup}}{\\tau}}}{NT_0}$$ 5 Parallelism We define a token to be a group of inputs that are processed to produce a group of outputs. The latency of a system is the time required for one token to pass through the system from start to end. The throughput is the number of tokens that can be produced per unit time. With spatial parallelism, multiple copies of the hardware are provided so that multiple tasks can be done at the same time. With temporal parallelism, a task is broken into stages, like an assembly line. Multiple tasks can be spread across the stages. Temporal parallelism is commonly called pipelining.","link":"/2022/08/03/Digital-Design-and-Computer-Architecture-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%BD%92%E7%BA%B3/"},{"title":"Digital-Design-and-Computer-Architecture-第六章归纳","text":"0 前言这一章主要学习MIPS架构，黑书的结构感觉有点混乱，所以按一定的逻辑重新组织了一下各个部分的内容。这一篇笔记类似于“字典”的形式，方便复习或查阅。 1 Four Principles in MIPS Design Simplicity favors regularity. Make the common case fast. Smaller is faster. Good design demands good compromises. 2 Three OperandsRegister Set/Register File Name Number(5 bits) Use ＄0 0 the constant value 0 ＄at 1 assembler temporary ＄v0-＄v1 2-3 function return value ＄a0-＄a3 4-7 function arguments ＄t0-＄t7 8-15 temporary variables ＄s0-＄s7 16-23 saved variables ＄t8-＄t9 24-25 temporary variables ＄k0-＄k1 26-27 operating system (OS) temporaries ＄gp 28 global pointer ＄sp 29 stack pointer ＄fp 30 frame pointer ＄ra 31 function return address MemoryOrganization Pattern MIPS uses a byte-addressable memory. Big-Endian and Little-Endian: Memory Map Constants/ImmediatesThe immediate specified in an instruction is a 16-bit two’s complement number in the range [–32,768, 32,767]. 3 Instructions SetR-TypeInstruction Format I-TypeInstruction Format J-TypeInstruction Format F-TypeInstruction Format Addressing Modes Register-Only Addressing Register-only addressing uses registers for all source and destination operands. All R-type instructions use register-only addressing. Immediate Addressing Immediate addressing uses the 16-bit immediate along with registers as operands. Some I-type instructions, such as add immediate (addi) and load upper immediate (lui), use immediate addressing. Base Addressing Memory access instructions, such as load word (lw) and store word (sw), use base addressing. The effective address of the memory operand is found by adding the base address in register rs to the sign-extended 16-bit offset found in the immediate field. PC-Relative Addressing Conditional branch instructions use PC-relative addressing to specify the new value of the PC if the branch is taken. The 16-bit immediate field gives the number of instructions between the BTA and the instruction after the branch instruction. Pseudo-Direct Addressing The J-type instruction encoding does not have enough bits to specify a full 32-bit JTA. Fortunately, the two least significant bits, $JTA_{1:0}$, should always be 0, because instructions are word aligned. The next 26 bits, $JTA_{27:2}$, are taken from the addr field of the instruction. The four most significant bits, $JTA_{31:28}$, are obtained from the four most significant bits of PC + 4. This addressing mode is called pseudo-direct. Because the four most significant bits of the JTA are taken from PC + 4,the jump range is limited. MIPS Instructions Tables 4 Programming32-Bit Constant The and instruction is useful for masking bits. The or instruction is useful for combining bits from two registers. A NOR ＄0 = NOT A. 123456789# 32-BIT CONSTANT# High-Level Codeint a = 0x6d5e4f3c;#MIPS Assembly Code# $s0=a lui $s0, 0x6d5e ori $s0, $s0, 0x4f3c Conditional Statementsif Statement12345678910# High-Level Languageif (i==j) f=g+h;f=f-i;#MIPS Assemble Language# $s0=f, $s1=g, $s2=h, $s3=i, s4=j bne $s3, $s4, target # if $s3 != $s4 then target add $s1, $s2, $s3 # $s1 = $s2 + $s3target: sub $s1, $s1, $s3 # $s1 = $s1 - $s3 if/else Statement12345678910111213# High-Level Languageif (i==j) f=g+h;else f=f-i;#MIPS Assemble Language# $s0=f, $s1=g, $s2=h, $s3=i, s4=j bne $s3, $s4, else # if $s3 != $s4 then else add $s1, $s2, $s3 # $s1 = $s2 + $s3 j target # jump to targetelse: sub $s1, $s1, $s3 # $s1 = $s1 - $s3target: switch/case Statement123456789101112131415161718192021222324252627# Hight-Level Languageswtich (amount){ case 20: fee=2; break; case 50: fee=3; break; case 100: fee=5; break; default: fee=0;}#MIPS Assemble Language# $s0=fee, $s1=amountcase20: add $t0, $0, 20 # $t0 = $0 + 20 bne $t0, $s1, case50 # if $t0 != $s1 then case50 addi $s0, $0, 2 # $s0 = $0 + 2 j done # jump to donecase50: add $t0, $0, 50 bne $t0, $s1, case100 addi $s0, $0, 3 j done case100: add $t0, $0, 100 bne $t0, $s1, default addi $s0, $0, 5 j done default: addi $s0, $0, 0 done: Loop Statementwhile Loop12345678910111213141516171819# High-Level Languageint pow=1;int x=0;while(pow!=128){ pow=pow*2; x=x+1;}# MIPS Assemble Language# $s0=pow, $s1=x addi $s0, $0, 1 # $s0 = $0 + 1 addi $s1, $0, 0 # $s1 = $0 + 0 addi $t0, $0, 128 # $t0 = $0 + 128while: beq $s0, $t0, target # if $s0 == $t0 then target sll $s0, $s0, 1 # $s0 = $s0 &lt;&lt; 1 addi $s1, $0, 1 # $s1 = $0 + 1 j while # jump to whiletarget: for Loop123456789101112131415161718192021222324252627282930# for Loop# High-Level Languageint sum=0;for (i=0:i!=10:i=i+1){ sum=sum+i;}# MIPS Assemble Language# $s0=sum, $s1=i addi $s0, $0, 0 # $s0 = $0 + 0 addi $s1, $0, 0 # $s1 = $0 + 0 addi $t0, $0, 10 # $t0 = $0 + 10for: beq $s1, $t0, target # if $s1 == $t0 then target add $s0, $s0, $s1 # $s0 = $s0 + $t0 addi $s1, $s1, 1 # $s1 = $s1 + 1 j for # jump to fortarget:# Using slt Ver. addi $s0, $0, 0 # $s0 = $0 + 0 addi $s1, $0, 0 # $s1 = $0 + 0 addi $t0, $0, 11 # $t0 = $0 + 10for: slt $t1, $s1, $t0 # $t1 = ($s1 &lt; $t0) ? 1 : 0 beq $t1, $0, target # if $t1 == $0 then target add $s0, $s0, $s1 # $s0 = $s0 + $s1 addi $s1, $s1, 1 # $s1 = $s1 + 1 j for # jump to fortarget: FunctionExample 112345678910111213141516171819202122232425262728293031# High-Level Languageint main(){ int y; y=diffofsums(2,3,4,5);}int diffofsums(int f,int g,int h,int i){ int result; result=(f+g)-(h+i); return result;}# MIPS Assemble Language# $s0=ymain: addi $a0, $0, 2 # $a0 = $0 + 2 addi $a1, $0, 3 # $a1 = $0 + 3 addi $a2, $0, 4 # $a2 = $0 + 4 addi $a3, $0, 5 # $a3 = $0 + 5 jal diffofsums # jump to diffofsums and save position to $ra add $s0, $v0, $0 # $s0 = $v0 + $0 ...# $s0=resultdiffofsums: addi $sp, $sp, -4 # $sp = $sp + -4 sw $s0, 0($sp) add $t0, $a0, $a1 # $t0 = $t0 + $t1 add $t1, $a2, $a3 # $t1 = $a2 + $a3 sub $s0, $t0, $t1 # $s0 = $t0 - $t1 add $v0, $0, $s0 # $v0 = $0 + $s0 lw $s0, 0($sp) addi $sp, $sp, 4 # $sp = $sp + 4 jr $ra # jump to $ra Example 2 (Recursive Function)1234567891011121314151617181920212223242526# High-Level Languageint factorial(int n){ if(n&lt;=1) return 1; else return (n*factorial(n-1));}# MIPS Assemble Languagefactorial: addi $sp, $sp, -8 # $sp = $sp + -8 sw $a0, 4($sp) sw $ra, 0($sp) addi $t0, $0, 2 # $t0 = $0 + 2 slt $t0, $a0, $t0 # $t0 = ($a0 &lt; $t0) ? 1 : 0 beq $t0, $0, else # if $t0 == $0 then else addi $v0, $0, 1 # $v0 = $0 + 1 addi $sp, $sp, 8 # $sp = $sp + 8 jr $ra # jump to $raelse: addi $a0, $0, -1 # $a0 = $0 + -1 jal factorial # jump to factorial and save position to $ra lw $ra, 0($sp) lw $a0, 4($sp) addi $sp, $sp, 8 # $sp = $sp + 8 mul $v0, $v0, $a0 jr $ra # jump to $ra 5 Compiling, Assembling, and Loading Compilation: A compiler translates high-level code into assembly language. Assembling: The assembler turns the assembly language code into an object file containing machine language code. On the first pass, the assembler assigns instruction addresses and finds all the symbols, such as labels and global variable names. The names and addresses of the symbols are kept in a symbol table. On the second pass through the code, the assembler produces the machine language code. Addresses for the global variables and labels are taken from the symbol table. The machine language code and symbol table are stored in the object file. Linking: The job of the linker is to combine all of the object files into one machine language file called the executable. Loading: The operating system loads a program by reading the text segment of the executable file from a storage device (usually the hard disk) into the text segment of memory. The operating system sets ＄gp to 0x10008000 (the middle of the global data segment) and ＄sp to 0x7FFFFFFC (the top of the dynamic data segment), then performs a jal 0x00400000 to jump to the beginning of the program.","link":"/2022/09/05/Digital-Design-and-Computer-Architecture-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%BD%92%E7%BA%B3/"},{"title":"t e s t","text":"把ooos博客的git都重新配了一下","link":"/2023/02/21/t-e-s-t/"},{"title":"Hello World","text":"TestTest 公式 $$\\sum_{n=1}^{114514}1919.810$$ 图片","link":"/2022/07/13/world/"},{"title":"工科大物「机械振动和电磁振荡」手册","text":"谐振动特征量 周期$T$，角/圆频率$\\omega$，频率$\\nu$ $T=\\frac{2\\pi}{\\omega}$, $\\omega=2\\pi\\nu$ 弹簧振子 回复力$F=-kx$ $\\omega^2=\\frac{k}{m}$ $$\\begin{align} &amp;a=\\frac{d^2x}{dt^2}=\\frac{F}{m}=-\\frac{k}{m}x=-\\omega^2x\\ &amp;\\Leftrightarrow\\frac{d^2x}{dt^2}+\\omega^2x=0\\ &amp;\\Rightarrow x=Acos(\\omega t+\\phi_0)\\end{align}$$ 能量$E=E_k+E_p=\\frac{1}{2}kA^2$ 单摆 回复力$F=-mgsin\\theta$ $\\omega^2=\\frac{g}{l}$ $$\\begin{align} &amp;a=\\frac{d^2\\theta}{dt^2}=-\\frac{g\\theta}{l}=-\\omega^2\\theta\\ &amp;\\Rightarrow \\theta=\\theta_mcos(\\omega t+\\phi_0)\\end{align}$$ 复摆/物理摆 回复力矩$M=-mghsin\\theta$ $\\omega^2=\\frac{mgh}{J}$ $$\\begin{align} &amp;a=\\frac{d^2\\theta}{dt^2}=-\\frac{mgh\\theta}{J}=-\\omega^2\\theta\\ &amp;\\Rightarrow \\theta=\\theta_mcos(\\omega t+\\phi_0)\\end{align}$$ 阻尼振动/减幅振动 阻力$F=-\\gamma v$ $\\delta=\\frac{\\gamma}{2m}$ $\\omega ‘=\\sqrt{\\omega_0^2-\\delta^2}\\space\\space\\space(\\omega_0&gt;\\delta)$ $$\\begin{align} &amp;m\\frac{d^2x}{dt^2}=-kx-\\gamma \\frac{dx}{dt}\\ &amp;\\Rightarrow x=A_0e^{-\\delta t}cos(\\omega ‘ t+\\phi_0’)\\end{align}$$ 临界阻尼最快平衡 受迫振动 驱动力$F=F_0cos\\omega_dt$ $A=\\frac{F_0}{m\\sqrt{(\\omega_0^2-\\omega_d^2)^2+4\\delta^2\\omega_d^2}}$ $tan\\phi=\\frac{-2\\delta\\omega_d}{\\omega_0^2-\\omega_d^2}$ $$\\begin{align} &amp;m\\frac{d^2x}{dt^2}=-kx-\\gamma \\frac{dx}{dt}+F_0cos\\omega_dt\\ &amp;\\Rightarrow x=A_0e^{-\\delta t}cos(\\omega ‘ t+\\phi_0’)+Acos(\\omega_dt+\\phi)\\end{align}$$ 共振 位移共振：$\\frac{dA}{d\\omega_d}=0\\Rightarrow\\omega_{共振}=\\sqrt{\\omega_0^2-2\\delta^2}$ 速度共振：$\\frac{dv_m}{d\\omega_d}=0\\Rightarrow\\omega_{共振}=\\omega_0$ 电磁振荡 $\\omega^2=\\frac{1}{LC}$ $$\\begin{align} &amp;-L\\frac{di}{dt}=\\frac{q}{C}\\Leftrightarrow\\frac{d^2q}{dt^2}=-\\frac{q}{LC}=-\\omega^2q\\ &amp;\\Rightarrow q=Q_0cos(\\omega t+\\phi_0)\\end{align}$$ 能量$W=W_e+W_m=\\frac{1}{2}\\frac{1}{C}Q_0^2$ 受迫振荡 电源电动势$\\varepsilon=\\varepsilon_0cos\\omega_d t$ $$\\begin{align} &amp;L\\frac{d^2q}{dt^2}+R\\frac{dq}{dt}+\\frac{q}{C}=q_0cos\\omega_dt\\ &amp;\\Rightarrow q=Q_0cos(\\omega_dt+\\phi)\\end{align}$$ 电共振 $\\frac{dI_0}{d\\omega_d}=0\\Rightarrow\\omega_d=\\sqrt\\frac{1}{LC}$ 一维谐振动合成同频率 $A=\\sqrt{A_1^2+A_2^2+2A_1A_2cos(\\phi_{02}-\\phi_{01})}$ $tan\\phi_0=\\frac{A_1sin\\phi_{01}+A_2sin\\phi_{02}}{A_1cos\\phi_{01}+A_2cos\\phi_{02}}$ $$\\begin{align} x&amp;=x_1+x_2=A_1cos(\\omega t+\\phi_{01})+A_2cos(\\omega t+\\phi_{02})\\ &amp;=Acos(\\omega t+\\phi_0)\\end{align}$$ 不同频率（拍） 近似条件：$A_1=A_2$，$|\\omega_2-\\omega_1|\\ll\\omega_1 or\\omega_2$ $$\\begin{align} x&amp;=x_1+x_2=A_1cos(\\omega_1 t+\\phi_{01})+A_2cos(\\omega_2 t+\\phi_{02})\\ &amp;=2Acos(\\frac{\\omega_2-\\omega_1}{2} t)cos(\\frac{\\omega_1+\\omega_2}{2}t+\\phi_0)\\end{align}$$ 旋转矢量图示法弹簧振子： 一维同频谐振动合成： 2022.10.6 Doxel","link":"/2022/10/06/%E5%B7%A5%E7%A7%91%E5%A4%A7%E7%89%A9%E3%80%8C%E6%9C%BA%E6%A2%B0%E6%8C%AF%E5%8A%A8%E5%92%8C%E7%94%B5%E7%A3%81%E6%8C%AF%E8%8D%A1%E3%80%8D%E6%89%8B%E5%86%8C/"},{"title":"Digital Design and Computer Architecture 第四章归纳","text":"0 前言123补充：做完了教程平台里前三章的题，发现logisim里的多输入异或门和教材里描述的行为有差异。教材里的多输入异或门起到奇偶校验的作用，而logisim里有单独的odd/even gates。 这章学习硬件描述语言，因为课程要求就只看Verilog的部分了。 突如其来的脑洞： 1 概念ModuleA block of hardware with inputs and outputs is called a module. Simulation and SynthesisDuring simulation, inputs are applied to a module, and the outputs are checked to verify that the module operates correctly. During synthesis, the textual description of a module is transformed into logic gates. 2 Examples &amp; IdiomsIn our experience, the best way to learn an HDL is by example. HDLs have specific ways of describing various classes of logic; these ways are called idioms. Combinational Logicsillyfunction123456module sillyfunction(input logic a,b,c output logic y); assign y=~a&amp;~b&amp;~c| a&amp;~b&amp;~c| a&amp;~b&amp; c;endmodule Bitwise OperatorsInverters1234module inv(input logic [3:0] a, output logic [3:0] y); assign y=~a;endmodule Logic Gates12345678module gates(input logic [3:0] a, b, output logic [3:0] y1, y2, y3, y4, y5); assign y1=a&amp;b;//AND assign y2=a|b;//OR assign y3=a^b;//XOR assign y4=~(a&amp;b);//NAND assign y5=~(a|b);//NORendmodule Reduction OperatorsEight-Input AND1234module and8(input logic [7:0] a, output logic y); assign y=&amp;a;endmodule Conditional Assignment2:1 Multiplexer12345module mux2(input logic [3:0] d0, d1, input logic s, output logic [3:0] y); assign y= s?d1:d0;endmodule 4:1 Multiplexer12345module mux4(input logic [3:0] d0,d1,d2,d3, input logic [1:0] s, output logic [3:0] y); assign y=s[1]?(s[0]?d3:d2):(s[0]?d1:d0);endmodule Internal VariablesFull Adder12345678module fulladder(input logic a, b, cin, output logic s, cout); logic p, g; assign p=a^b; assign g=a&amp;b; assign s=p^cin; assign cout=g|(p&amp;cin);endmodule Z’s and X’sTristate BuffersTristate busses can have multiple drivers, so they should be declared as a net. Two types of nets in SystemVerilog are called tri and trireg. 12345module tristate(input logic [3:0] a. input logic en, output tri [3:0] y); assign y=en?a:4'bz;endmodule Bit Swizzling1assign y={c[2:1],{3{d[0]}},c[0],3'b101} DelaysLogic Gates with Delays12345678910'timescale 1ns/1psmodule example(input logic a,b,c, output logic y); logic ab,bb,cb,n1,n2,n3; assign #1 {ab,bb,cb}=~{a,b,c}; assign #2 n1=ab&amp;bb&amp;cb; assign #2 n2=a&amp;bb&amp;cb; assign #2 n3=a&amp;bb&amp;c; assign #4 y=n1|n2|n3;endmodule Structural ModelingStructural Model of 4:1 Multiplexers12345678module mux4(input logic [3:0] d0, d1, d2, d3, input logic [1:0] s, output logic [3:0] y) logic [3:0] low, high; mux2 lowmux(d0, d1, s[0], low); mux2 highmux(d2, d3, s[0], high); mux2 finalmux(low, high, s[1], y);endmodule Accessing Parts of Busses123456module mux2_8(input logic [7:0] d0, d1. input logic s, output logic [7:0] y); mux2 lsbmux(d0[3:0], d1[3:0], s, y[3:0]); mux2 msbmux(d0[7:4], d1[7:4], s, y[7:4]);endmodule Sequential LogicRegister123456module flop(input logic clk, input logic [3:0] d, output logic [3:0] q); always_ff @(posedge clk) q&lt;=d;endmodule Resettable Register1. Asynchronous 12345678module flopr(input logic clk, input logic reset, input logic [3:0] d, output logic [3:0] q); always_ff @(posedge clk, posedge reset) if(reset) q&lt;=4'b0; else q&lt;=d;endmodule 2. Synchronous 12345678module flopr(input logic clk, input logic reset, input logic [3:0] d, output logic [3:0] q); always_ff @(posedge clk) if(reset) q&lt;=4'b0; else q&lt;=d;endmodule Enabled Register123456789module flopr(input logic clk, input logic reset, input logic en, input logic [3:0] d, output logic [3:0] q); always_ff @(posedge clk, posedge reset) if(reset) q&lt;=4'b0; else if(en) q&lt;=d;endmodule Synchronizer12345678910module sync(input clk, input logic d, output logic q); logic n1; always_ff@(posedge clk) begin n1&lt;=d; q&lt;=n1; endendmodule MoreD Latch123456module latch(input logic clk, input logic [3:0] d, output logic [3:0] q); always_latch if (clk) q&lt;=d;endmodule Inverter Using always12345module inv(input logic [3:0] a, output logic [3:0] y); always_comb y=~a;endmodule Full Adder Using always1234567891011module fulladder(input logic a, b, cin, output logic s, cout); logic p, g; always_comb begin p=a^b; g=a&amp;b; s=p^cin; cout=g|(p&amp;cin); endendmodule Seven-Segment Display Decoder12345678910111213141516171819module sevenseg(input logic [3:0] data, output logic [6:0] segments); always_comb case(data) //abc_defg 0: segments = 7'b111_1110; 1: segments = 7'b011_0000; 2: segments = 7'b110_1101; 3: segments = 7'b111_1001; 4: segments = 7'b011_0011; 5: segments = 7'b101_1011; 6: segments = 7'b101_1111; 7: segments = 7'b111_0000; 8: segments = 7'b111_1111; 9: segments = 7'b111_0011; default: segments = 7'b000_0000; endcaseendmodule 3:8 Decoder123456789101112131415module decoder3_8(input logic [2:0] a, output logic [7:0] y); always_comb case(a) 3'b000: y = 8'b00000001; 3'b001: y = 8'b00000010; 3'b010: y = 8'b00000100; 3'b011: y = 8'b00001000; 3'b100: y = 8'b00010000; 3'b101: y = 8'b00100000; 3'b110: y = 8'b01000000; 3'b111: y = 8'b10000000; default: y = 8'bxxxxxxxx; endcaseendmodule Priority Circuit123456789module priorityckt(input logic [3:0] a, output logic [3:0] y); always_comb if(a[3]) y &lt;= 4'b1000; else if (a[2]) y &lt;= 4'b0100; else if (a[1]) y &lt;= 4'b0010; else if (a[0]) y &lt;= 4'b0001; else y &lt;= 4'b0000;endmodule Priority Circuit Using Don’t Cares1234567891011module priority_casez(input logic [3:0] a, output logic [3:0] y); always_comb casez(a) 4'b1???: y &lt;= 4'b1000; 4'b01??: y &lt;= 4'b0100; 4'b001?: y &lt;= 4'b0010; 4'b0001: y &lt;= 4'b0001; default: y &lt;= 4'b0000; endcaseendmodule Finite State MachinesDivide-By-3 Finite State Machines1234567891011121314151617181920module divideby3FSM(input logic clk, input logic reset, output logic y); typedef enum logic [1:0]{S0, S1, S2} statetype; statetype [1:0] state, nextstate; // state register always_ff @(posedge clk, posedge reset) if(reset) state&lt;=S0; else state&lt;=nextstate; //next state logic always_comb case(state) S0: nextstate&lt;=S1; S1: nextstate&lt;=S2; S2: nextstate&lt;=S0; default :nextstate&lt;=S0; endcase //output logic assign y=(state == S0);endmodule Pattern Recognizer Moore FSM123456789101112131415161718192021222324module patternMoore(input logic clk, input logic reset, input logic a, output logic y); typedef enum logic[1:0]{S0,S1,S2} statetype; statetype state, nextstate; //state register always_ff @(posedge clk,posedge reset) if(reset) state &lt;=S0; else state&lt;=nextstate; //next state logic always_comb case(state) S0:if(a) nextstate=S0; else nextstate=S1; S1:if(a) nextstate=S2; else nextstate=S1; S2: if (a) nextstate = S0; else nextstate = S1; default: nextstate = S0; endcase // output logic assign y = (state == S2);endmodule Pattern Recognizer Mealy FSM123456789101112131415161718192021module patternMoore(input logic clk, input logic reset, input logic a, output logic y); typedef enum logic{S0,S1} statetype; statetype state, nextstate; //state register always_ff @(posedge clk,posedge reset) if(reset) state &lt;=S0; else state&lt;=nextstate; //next state logic always_comb case(state) S0: if(a)nextstate=S0; else nextstate=S1; S1: if(a)nextstate=S0; else nextstate=S1; default: nextstate=S0; endcase assign y=(a &amp; state==S1);endmodule Parameterized ModulesParameterized N-Bit 2:1 Multiplexers12345678910111213141516module mux2 #(parameter width=8) (input logic[width-1:0]d0,d1, input logic s, output logic[width-1:0] y); assign y=s?d1:d0;endmodulemodule mux4_12(input logic [11:0] d0,d1,d2,d2, input logic [1:0] s, output logic [11:0] y); logic [11:0] low,hi; mux2 #(12) lowmux(d0,d1,s[0],low); mux2 #(12) himux(d2,d3,s[0],hi); mux2 #(12) outmux(low,hi,s[1],y);endmodule Parameterized N-Input AND Gate1234567891011121314module andN #(parameter width=8) (input logic [width-1:0]a, output logic y); genvar i; logic [width-1:0] x; generate assign x[0]=a[0]; for (i=1;i&lt;width;i=i+1)begin: forloop assign x[i]=a[i]&amp;x[i-1]; end endgenerate assign y=x[width-1];endmodule Testbenches累了，懒得手打了。 3 准则 Use always_ff @(posedge clk) and nonblocking assignments to model synchronous sequential logic. Use continuous assignments to model simple combinational logic. Use always_comb and blocking assignments to model more complicated combinational logic where the always statement is helpful. Do not make assignments to the same signal in more than one always statement or continuous assignment statement. 4 语法查阅运算符优先级表 常数The format for declaring constants is N’Bvalue, where N is the size in bits, B is a letter indicating the base, and value gives the value. An exception is that ‘0 and ‘1 are SystemVerilog idioms for filling a bus with all 0s and all 1s, respectively.","link":"/2022/08/11/Digital-Design-and-Computer-Architecture-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%BD%92%E7%BA%B3/"},{"title":"工科大物「热学」手册","text":"计算常量 温标转换：$T/K=t/^\\circ C+273.15$ 纯水三相点：$0.01^\\circ C/273.16K$ 普适气体常量：$R=8.31J/(mol\\cdot K)$ 玻耳兹曼常量：$k=\\frac{R}{N_A}=1.38\\times 10^{-23}J/K$ 基础概念 热运动：微观粒子的无规则运动。 热现象：大量粒子热运动的集体表现。例：布朗运动。 平衡态、非平衡态 定常态 准静态过程/平衡过程 （热力学）系统 内能是系统状态的单值函数。 循环过程、正循环、逆循环 热机、制冷机 可逆过程、不可逆过程 定理&amp;公式 理想气体的物态方程$$pV=\\frac{m}{M}RT$$压强公式$$\\begin{align} p&amp;=nm_0\\bar{v_x^2}\\ &amp;=\\frac{2}{3}n\\bar{\\varepsilon_k}\\ &amp;=nkT(物态方程)\\end{align}$$推论：$$\\bar{\\varepsilon_k}=\\frac{3}{2}kT(平动)$$能量按自由度均分定理$$\\bar{\\varepsilon_k}=\\frac{i}{2}kT(总)$$单原子分子$i=3$, 刚性双原子分子$i=5$, 刚性多原子分子$i=6$. 理想气体的内能$$E=\\frac{m}{M}\\frac{i}{2}RT$$分子速率分布函数$$f(v)=\\frac{dN}{Ndv}$$必满足归一化条件$$\\int\\limits_0^{+\\infty}{f(v)dv}=1$$麦克斯韦速率分布律$$f(v)=4\\pi(\\frac{m_0}{2\\pi kT})^{\\frac{3}{2}}e^{-\\frac{m_0v^2}{2kT}}v^2$$推论： 平均速率$$\\begin{align}\\bar{v}&amp;=\\sqrt{\\frac{8kT}{\\pi m_0}}\\&amp;=\\sqrt{\\frac{8RT}{\\pi M}}\\&amp;=1.6\\sqrt{\\frac{RT}{M}}\\end{align}$$ 方均根速率$$\\begin{align}v_{rms}&amp;=\\sqrt{\\frac{3kT}{m_0}}\\&amp;=\\sqrt{\\frac{3RT}{M}}\\&amp;=1.73\\sqrt{\\frac{RT}{M}}\\end{align}$$ 最概然速率$$\\begin{align}v_p&amp;=\\sqrt{\\frac{2kT}{m_0}}\\&amp;=\\sqrt{\\frac{2RT}{M}}\\&amp;=1.41\\sqrt{\\frac{RT}{M}}\\end{align}$$ 平均碰撞频率、平均自由程$$\\bar{Z}=\\sqrt{2}\\pi d^2\\bar{v}n\\\\bar{\\lambda}=\\frac{\\bar{v}}{\\bar{Z}}=\\frac{1}{\\sqrt{2}\\pi d^2n}=\\frac{kT}{\\sqrt{2}\\pi d^2p}$$热力学第零定律 自己背去。 热力学第一定律$$\\delta Q=dE+\\delta A$$热力学第二定律 自己背去。 等体过程 特征：$$dE=\\delta Q$$公式：$$\\begin{align} dE &amp;=\\delta Q\\ &amp;=\\frac{m}{M}C_{V,m}dT\\ C_{V,m}&amp;=\\frac{i}{2}R\\end{align}$$等压过程 特征：$$\\Delta A=p\\Delta V$$公式：$$\\begin{align} \\delta Q_p&amp;=\\frac{m}{M}Q_{p,m}dT\\ C_{p,m}&amp;=R+C_{V,m}\\ &amp;=(1+\\frac{i}{2})C_{V,m}\\end{align}$$[摩尔]热容比/绝热指数$$\\gamma=\\frac{C_{p,m}}{C_{V,M}}=1+\\frac{2}{i}$$等温过程 特征：$$\\delta Q=\\delta A$$公式：$$\\delta A=pdV=\\frac{p_1V_1}{V}dV=-\\frac{p_1V_1}{p}dp$$绝热过程 特征：$$\\delta Q=dE+\\delta A=0$$公式：$$\\begin{align} pV^\\gamma&amp;=C_1\\ V^{\\gamma-1}T&amp;=C_2\\ p^{\\gamma-1}T^{-\\gamma}&amp;=C_3\\end{align}$$热机效率、制冷系数$$\\eta=\\frac{A}{Q_1}=\\frac{Q_1-Q_2}{Q_2}\\u=\\frac{Q_2}{A}=\\frac{Q_2}{Q_1-Q_2}$$卡诺循环 $$\\frac{Q_1}{T_1}=\\frac{Q_2}{T_2}\\\\\\eta=1-\\frac{T_1}{T_2}$$卡诺定理 一切可逆机，效率$\\eta=1-\\frac{T_1}{T_2}$ 一切不可逆机，效率$\\eta\\leq1-\\frac{T_1}{T_2}$ 熵$$\\oint(\\frac{\\delta Q}{T})_{可逆}=0$$ $$dS=(\\frac{\\delta Q}{T})_{可逆}$$ 波尔兹曼关系$$S=klnW$$ 2022.9.15 Doxel","link":"/2022/09/15/%E5%B7%A5%E7%A7%91%E5%A4%A7%E7%89%A9%E3%80%8C%E7%83%AD%E5%AD%A6%E3%80%8D%E6%89%8B%E5%86%8C/"},{"title":"应用于分离式内存的ROLEX技术","text":"哈哈, 赶了半天ddl被放鸽子了, 科研课堂也就图个乐. ROLEX方法的提出动因 在分离式内存 (disaggregated memory) 中, 使用树形结构来索引有序键值的效果和性能都不尽人意. XStore系统首次将智能索引 (learned index) 技术引入到分布式储存, 解决了树形结构的不足. 但对于动态的workload, XStore只能依赖于集成的内存系统. 对XStore进行改进以适用于分离式内存: XStore-D, 但效果仍不理想. 主要有以下原因: 内存节点 (memory node) 的算力不足. 如果将计算工作转移到计算节点 (compute node), 需要使用巨大的网络带宽. 不同节点间存在不一致的问题. 为了解决以上种种问题, 论文提出了ROLEX方法. ROLEX方法的主要内容数据插入与模型训练解耦传统方案: 插入数据后, 对数据集重新排序 将新的数据集传送到计算节点重新训练模型 将新的模型同步到所有节点 ROLEX的方案: 对算法和模型改进后, ROLEX能实现以下功能: 新数据可以直接插入到内存节点. 即使插入了适量新数据, 模型无需重新训练也能继续正确索引. 插入的新数据较多时, 模型在内存节点就可以完成重新训练, 无需再传送到计算节点. 实现方法: 向分段线性回归模型 (PLR) 中加入偏移量, 使得插入新数据后仍能索引数据. 数据只能在固定大小的数组区域移动, 查询数据时返回数据的所在区域 (leaf). 这样保证了数据不会丢失. 当某个leaf的容量不够时, 在相同的位置添加一个synonym-leaf. leaf和对应的synonym-leaf使用指针连接. 这三个限制条件使得新插入的数据仍在之前预测过的范围之内, 模型不需要重新训练也能找到新插入的数据. ROLEX系统的组织结构 Leaves leaves储存在Leaf Region里. Leaf Region之前紧邻的8B储存leaves的个数 (alloc_num) 和能储存的最大数目. Upper models Upper models通过最小键集 (the smallest keys) 进行训练, 用来索引下层的PLR模型. PLR models PLR模型由最小键集, 参数, 和leaf teble (LT) 和 synonym leaf table (SLT)组成. LT和SLT储存8B的entries. 每一条entry由1 bit的lock位, 7 bits的leaf region, 8bits的指针和48 bits的leaf number组成. SLT的第一项用于记录已经写入的entry数量 ($slot_{use}$). LT的大小在训练模型时决定, SLT的大小固定为$2^8$个entry. CirQ ROLEX会维护一个环形队列 (CirQ) 来储存重新训练后加入的新模型. Learned cache Learned cache位于计算节点: 计算节点会将索引模型缓存到自身. 单边索引操作 (One-sided Index Operations)单边索引操作都是在计算节点完成的. 点查询 点查询数据时, 会先用索引模型找到leaf在LT或SLT中的位置, 再根据下方的公式计算出leaves的实际地址. 最后使用doorbell batching的方式在leaves中找到数据. 范围查询 在进行[K, N]查询时, 会额外查询相邻的$N/\\delta$个leaf. 仍然使用doorbell batching的方式查询leaves. 插入 先用点查询的方式找到相应的leaves, 然后将lock位设为1 (通过CAS), 插入数据, 最后将lock位设回0, 并将alloc_num和$slot_{use}$加上1 (通过FAA). 更新 与插入类似, 同样先用点查询的方式找到对应的数据, 然后检查数据是否为最新, 如果不是则进行替换. 删除 与插入和更新类似. 但删除某个数据时不改变其它数据的排列, 以确保预测模型在重新训练前仍能使用. 模型异步重新训练 (Asynchronous Retraining)当SLT的容量即将不足以容纳新数据时 (事实上是在距离完全填满还有$2^7-1$个slot时), 内存节点会异步重新训练模型. 为了保证一致性, 在重新训练模型时, 不会直接阻塞计算节点的操作. 计算节点会通过对比旧的LT, SLT和新的LT, 将数据重定向到新的SLT, 从而避免不一致现象的发生. ROLEX方法的性能分析 在不同的YCSB workload中, 与其它方法相比, ROLEX方法的吞吐量都有明显优势. 在其它情况中, ROLEX方法的大吞吐量和低延迟都有明显优势. 对于分离式内存系统, 即CPU资源有限的情况下, ROLEX方法的可扩展性也优于其他方法. ROLEX虽然训练模型的延迟略高, 但读写数据的延迟很低. ROLEX的内存开销要明显优于传统的树形结构.","link":"/2023/03/02/%E5%BA%94%E7%94%A8%E4%BA%8E%E5%88%86%E7%A6%BB%E5%BC%8F%E5%86%85%E5%AD%98%E7%9A%84ROLEX%E6%8A%80%E6%9C%AF/"},{"title":"航概题库分类总结","text":"内容：航空航天概论B期末题库（文科试卷）。基于刷题小程序总结，涵盖了绝大部分内容。 时间：2023春季学期。 第一章 1~135科学知识： 国际空间站：16个国家研制，第一个模块由俄罗斯发射 通讯卫星：一般为地球静止轨道卫星 速度与马赫数： 临近空间：距地面20km~100km 高动态临近空间Ma&gt;1，低动态临近空间Ma&lt;1. 组合式飞艇静升力占60%~70% 第一宇宙速度：环绕地球，7.91km/s 第二宇宙速度：离开地球，11.18km/s 第三宇宙速度：离开太阳系，16.6km/s 特殊多选： 隐身技术全选 直升机布局全选 雷达隐身不降温 红外隐身不吸波 推力矢量不选巡航 应用卫星不选试验 应用卫星包括不选技术 卫星用途不选商业 载人航天不选日本 战斗机不指挥 超声速战斗机不选低空 航天飞机不安全不全能 飞机解决的关键问题不选方便维护 特征： 鹞： 垂直起落发动机 涡轮风扇发动机 自行车式起落架 小起落架起支撑、稳定作用 转向喷口0~98.5° 6个辅助喷口 鱼鹰：倾转旋翼 运10：世界屋脊 大型液体火箭：现代航天技术基础 涡轮喷气发动机突破声障 X1：突破声障 SR-71：突破热障 T-50：俄罗斯第五代战机 F-117：隐身飞机第一个实用型号 BZK-005：双尾撑布局，具有隐身能力（隐身双马尾） 具有隐身能力的飞机选F-22和F-35 ARJ21-700：中国首架自主知识产权涡扇支线客机 A380：最大旅客机 X-29：前掠翼 SR-71：飞得最快 米格-9：航炮与近期道口位置不合理 米格-25：飞得最高 美国DAPRA全新空天战机是X-37B 美国捕食者：倒V型尾翼 土星5号载阿波罗11号 J-8II优势选波阻小和焦点变化小 超过3倍声速：米格-25和SR-71 空天飞机尚未开始使用 航天技术核心：火箭 过失速机动：有利于近距格斗，提高击毁概率 第一个提出现代飞机：乔治·凯利 礼炮号：第一个载人航天站 波音737：2台发动机 A380飞机：550座级 时间数字： C919：2017首飞 第一颗人造地球卫星：1957发射 苏联东方1号：1961发射 苏联礼炮：1971发射 挑战者：1986失事 哥伦比亚：1981第一架航天飞机，2003失事，失事直接原因是热障 莱特兄弟：1903年12月17日美国 法国气球：1783年11月21日 美国航天飞机：1981 运20：最大起飞重量220吨 “旅行者”1号：36年飞出太阳系 大飞机立项：2007年2月26日 协和号：1969 首次登月：1969美国 国产系列： 载人飞船发射场：酒泉 载人飞船着陆场：内蒙古 新一代大推力火箭发射场：文昌 风云系列：气象卫星 东方红系列：通信卫星 长征系列：运载火箭 歼6：我国第一代超声速战斗机 歼789：我国第二代 歼10：我国第三代 歼15：外形不选V 歼20：鸭翼双发 歼31：单座双发 北斗：导航定位卫星，共有3颗卫星 神舟3号：第一次带模拟假人（三甲/3假） 神舟5号：2003年发射，由长征2号F发送，杨利伟入太空第一人 神舟6号：也由长征2号F发送，有龙哥和胜哥 神舟7号：2008年发射，没有龙哥，刚哥第一个出舱 神舟8号：与天宫1号对接（宫吧） 神舟10号：王亚平太空授课 长征2号F：长征2号系列最新改进型号（fresh 新），使用液体火箭发动机 长征4号：发射太阳同步轨道卫星（央视/阳4） 长征5号：新一代重型运载火箭 长征7号：载人 嫦娥1号：2007年10月24日，由长征3号甲发送（三甲医院/3甲1月） 嫦娥2号：飞往深空 嫦娥3号：玉兔号月球车；探月方式是软着陆 嫦娥探测计划不选登月 天宫2号：我国第一个真正意义太空实验室 天舟1号：首个在轨补加推进剂，与神舟8910对接 “天链”1号：2008 我国第一颗人造地球卫星东方红：1970 直9，8，5：我国直升机工业主要产品 超7：枭龙/FC-1，中巴共同投资 欧洲空客在天津投产 歼轰7：飞豹 60周年阅兵： 多选不选歼6 60周年阅兵预警机KJ-2000 女飞行员K-8 空中梯队全选 四发喷气飞机是空警2000 汶川地震使用Mi-26 北京一号属于通用飞机 北京二号是探空火箭 分类： 第一代超声速战斗机：米格19，F100 第二代超声速战斗机：米格21，F104 第三代战斗机不选F-4 第四代战斗机不选Su-47，典型代表美国F-22 二战飞机不选苏联 隐身飞机不选JAS 直升机不是飞机 监视敌方的机型是预警机 前掠翼布局飞机选金雕和X-29 无人航天器分为卫星和探测器 图片题： 伸缩管式加油 插头椎管式 全球鹰 结构名称 升降舵在平尾上 方向舵在立尾 第二章 136~297方程关系： 连续性方程：流体横截面变大，流速变小（质量守恒） 伯努利方程：速度增加，压力减小（能量守恒） 风洞试验基本依据是相对运动原理 标准大气音速：341m/s 可压缩性越大，声速越小 力相关： 多旋翼无人机：电动机驱动 襟翼：增加升力，不在巡航时使用（可以增阻，不要误选） 升力贡献性质相近选边条和鸭翼 压差阻力：只与形状和面积有关，流线型减小压差阻力 摩擦阻力不选形状，由大气粘性产生 诱导阻力因素不选部件相对位置 升力与机身面积无关，不与迎角成正比（失速前，迎角增大升力增大），与空气密度、速度平方、机翼面积成正比 减小干扰阻力措施全选（减小干扰无干扰项） 整流片减小干扰阻力 低速飞机无激波阻力 减小激波阻力不选平直机翼 零升阻力不选诱导阻力 诱导阻力伴随升力产生 翼梢小翼减小诱导阻力 高尔夫小坑不选两个摩擦 碎玻璃全部向外 低空超音速飞行发动机功率增大 边界层多选不选不会影响阻力 构造： 前掠翼选两个性能好 变后掠翼：改善性能，提高马赫 机翼上反角：横向静稳定性 副翼操纵滚转 超临界翼型不选尖锐 变后掠翼缺点不选阻力大 三角机翼优点不选升力大 高亚声速民用采用后掠翼延缓激波 低速飞行采用大展弦比平直机翼 大展弦比平直机翼特点不选低速诱导阻力大 超声速飞机厚度小，稍根比小，展弦比小，后掠角大，长细比大。采用三角机翼。 迎角为零时，平凸翼型和层流翼型可产生升力 飞行器操纵与行为： 民用飞机飞行速度指巡航速度 军用飞机飞行速度指最大飞行速度 飞行性能不选角选速度 改变方向且增加高度：战斗转弯 增大速度且提高准度：俯冲 前推驾驶杆，升降舵偏转，俯仰运动 左右摆驾驶杆，副翼偏转，滚转运动 左脚蹬或右脚蹬，方向舵偏转，偏航运动 迅速获得高度优势：跃升 直升机操纵没有襟翼 直升机 优点不选航程 与固定翼飞机相比，缺点全选 和旋翼机相比选驱动方式不同 与其他飞机相比不选平飞速度快 克服反扭距方法不选方向相同 鸭式飞机优点不选稳定性好 变距操纵：桨叶周期挥舞 脚操纵：改变尾桨推力 桨叶叶距：拉力改变 尾桨变距目的是改变侧向力 倾斜锥前倾，向前飞行 尾旋机动：歼击机和教练机（尖叫鸡） 尾旋特点不选半径大 尾旋同时绕三轴旋转（瞎转） 三轴稳定法不选自转轴 姿态稳定不选姿态控制 重力梯度稳定不选精度高 自旋稳定形状圆柱，球，椭球都行 纵向稳定性重心在焦点前，稳定力矩方向相反 上角是为了横向静稳定性 腹鳍为了方向静稳定性 飞机稳定性选动稳定性至关重要 再入方式有纯弹道式，半单道式，跳跃式，滑翔式（全选） 跳跃式：地球轨道以外空间返回 半单道式：神舟系列 纯弹道式：圆球体或钝头 对接不选飞船与卫星 发射窗口因素全选 航天器任务阶段不包括准备 航天器轨道形状全选 轨道机动方面不选摄动 机头向下偏转是为了观察跑道 大气层相关： 航天器回收再入段：80~100km 标准大气规定不选温度 对流层不选平稳 行星际空间的特点全选 行星际空间受到的影响不选高能带电粒子 空间飞行环境全选 范爱伦辐射存在于磁层 气流相关： 飞机纵向气动布局：正常式、鸭式、无尾式 声障现象不加热 激波阻力造成声障 声障根本原因是局部激波 烧蚀法（单选）、冷却法、隔热层保护、耐高温材料（多选全选）消除热障 激波始终伴随飞机以同样速度向前运动 流过激波时，速度减小，压强温度密度增大 马赫越大压缩程度越大 马赫数可以判断气体压缩 高速气流主导因素是压缩性，低速气流主导因素是速度变化 温度升高，粘性增大 理想流体忽略粘性 图片题： 起飞阶段： 嫦娥一号征程： 环月轨道是月球极轨道 机翼： 飞机降落： 无人机偏航： 无人机前飞： 卫星结构： 气流： 菱形机翼激波： 第三章 298~428火箭相关： 火箭滚转靠测喷管喷气控制，俯仰偏航靠喷管摆动 并联优点选研制快，长度短 并联缺点不选弯曲刚度差 串联优点不选运输储存方便 串联缺点选弯曲刚度差，竖起不便 探空火箭：技术试验 运载火箭：多级，强调可靠性 比冲越高，发动机总冲越大 化学火箭发动机比冲最大约为5000m/s（5化生） 单管燃烧室：每一个火焰筒外面都有单独壳体外套 联管燃烧室：各火焰筒在同一环腔 环形燃烧室：环形腔内布置了共同的环形火焰筒 加力燃烧室位于涡轮后 固体燃烧室温度比液体低 固体发动机比液体发动机比冲低，性能更稳定 固体发动机无控制活门，调节不方便 固体发动机省掉了输送系统 战术导弹使用固体火箭发动机 固体火箭发动机多选不选航天飞机主发动机 液体发动机优点全选（液绩全优） 液体发动机推进剂组元为单、双、三，应用最广的是双 液体发动机组成不选终止装置 常用液体燃烧机：液氢、航空煤油（青梅） 液氧：无毒，成本低；用于航天飞行器的运载火箭 液氢：比冲高 飞行状态： 额定状态：长时间爬升和高速平飞 起飞状态、慢车状态：严格限制时间 巡航状态：最省油 起飞推力最大 慢车状态推力是起飞推力4%（慢4了） 巡航状态推力是起飞推力65%~75% 发动机： 发动机按原理分类全选 燃气涡轮发动机： 应用最广泛的航空发动机 核心不选尾喷管 多选选两个涡轮和垂直起落 火箭发动机：使人类冲出地球，性能参数不选消耗率 冷却液体火箭发动机：粘度小，传热性好 涡轮螺桨发动机： 与喷气相比：耗油率小，低亚声速效率高 与活塞相比优点不选低空性能好 500~700km/h 涡轮带动螺旋桨产生拉力 螺桨和尾喷口产生推力 螺桨飞机不高速因为局部激波 涡轮喷气发动机： 进气道和压气机增压 燃烧室加速、化学能转换为热能，涡轮产生机械能 加力燃烧室速度高温度高 燃料是航空煤油 单位推力：每单位流量空气的推力 单位耗油率：单位推力消耗的燃油量 推重比：地面状态推力与结构重量比 涡轮风扇发动机： 低压涡轮带风扇 高压涡轮带压气机 歼击机的涵道比比民用要小 优点不选排气速度大 涵道比相关：战斗机&lt;1，增大后成为涡轮螺桨和浆扇，减小后成为涡轮喷气 F-22猛禽使用加力涡轮风扇发动机 涡轮轴发动机：适合于直升机 冲压发动机： 必须有助推器 没有压气机 没有涡轮 分类不选低速 X-43A创速度纪录，使用冲压发动机 活塞式发动机： 燃油率低 不能直接产生推力，性能参数不选推力 用于小公务机小运输机农业机 燃料是航空汽油 第一架飞机采用 浆扇发动机： 优点不选大中型客机 特点不选桨叶数目少 AM42型发动机不选变速 第四代飞机发动机推重比约在10左右（四是四，十是十…） 飞机突破声障得益于空气喷气发动机 适用于高超声速的发动机：火箭发动机、冲压发动机（火箭冲呀） 推力矢量产生方式不选摆动发动机（发动机不能开摆） 进气道和压气机： 进气道：整流，动能转为压力能（减速增压） 轴流式压气机：静子叶片减速增压改方向，转子叶片增速增压 离心式压气机：比轴流式压气机增压比小 形状： 收缩形：亚声速尾喷管、涡轮喷气、涡轮导向器 扩散形：亚声速进气，轴流式压气机相邻叶片 收缩-扩散形：火箭 拉瓦尔尾喷管：超声速 超声速进气道：产生斜激波，降低速度 图片题：压气机： 涡轮螺桨发动机： 涡轮风扇发动机： 涡轮喷气发动机： 固体药柱： 发动机燃烧室： 第四章 429~560设备： 机载设备不选操纵系统 机载雷达：半主动寻的制导 空速管：飞机机头最前端细杆 空速管水平叶片：测俯仰角度 自动测向器：属于测向无线电系统 电阻式温度传感器：确定关系式 迎角传感器：测量飞机轴线相对于气流 （真）航向角：纵轴与北极夹角 陀螺（地平）仪 两个特点是定轴性和进动性 组成不选磁罗盘 测量俯仰和倾侧姿态 测量基准是地垂线 漂移性由外干扰力矩引起 磁罗盘测磁航向角，算代数和 相控阵雷达：多个波束多个目标 无线电高度表/雷达高度表：测量电波在飞行器与地面之间时间 雷达测距：测量天线至目标无线电波往返时间 电子显示器 电信号转变为光信号 20世纪70年代（电7时代） 飞行座舱显示器有机械和电子两种 电子显示系统优点不选变化趋势 指针-刻度盘缺点不选变化慢 主飞行显示器包含航向角，俯仰角 导航参数显示仪 显示机场和导航台 位置和距离属于导航参数 飞机飞行中紧急救生：弹射救生系统 发射台或低空紧急救生：弹射座椅和逃逸塔 轨道飞行阶段紧急救生：中断计划提前返回 返回阶段紧急救生：弹射座椅和多降落伞系统 空中和海上遇难求援频率：121.500（跟120最接近） 飞行员个体防护设备不选防热 无人机： 数据中继站不选海上 信息传输最有效方式：卫星中继链路 数据链路包括：机载数据终端和地面设备 机载数据终端包括：不选发射机 地面设备包括：视频接收机和终端处理机 地面控制站组成全选 有人无人驾驶区别：有无仪表显示系统 GPS： 美国的，性能最好功能最完备 1994年建成 运行周期12小时 轨道高度20000km 6个赤道平面 至少需要4颗 共有24颗卫星（24 = 6 * 4） 组成不选惯性导航 运算处理部分：主控站 检测数据：监控站 卫星位置为已知参数 其它： 天链一号中继卫星轨道高度36000Km 天链一号由4颗卫星组成 远望号已有7艘 中国航天陆上测控站包括全选 中国航天测控控制中心不选西昌 俄罗斯Glonass 多选不选6个轨道平面（俄罗斯不6） 分布在3个轨道平面 战斗机正过载可达8~9（89不到10） 正过载选血液向头部流动 战斗机扛过载不选前倾座椅 导航： 常用导航方式全选 图像匹配导航 类型为地形匹配和景象匹配 导弹末制导中采用 景象匹配导航： 利用地表特征 地形匹配导航 利用地形高度轮廓 地形跟踪和地形回避是保证安全的重要技术 无线电导航： 特点不选不易被发现 类型不选测高 测距差无线电导航：属于远程无线电导航系统 卫星导航系统： 提供信息全选 发射信号速度300000Km/s（光速，注意单位是s） 一颗中继卫星覆盖率40%~50% 地基系统覆盖率2%~3% 自主导航技术：天文导航和惯性导航 惯性导航 特点全选 组成不选接收设备 不单独使用 天文导航适合对象不选低空飞机 测控系统与其它系统： 卫星测控系统： 距离100000Km以下 载人航天测控系统： 不选大口径天线 大气数据系统： 静压、动压和总温传感器 可以测量飞行高度 组成部分不选陀螺仪 自动驾驶仪系统： 双手：执行装置 眼睛：敏感元件 大脑：综合放大装置 组成不选舵面 自动控制是指自动操纵气动舵面和油门杆 电传操纵系统： 部件不选传动装置 通过电缆传输，控制气动舵面 通过微型操纵杆控制舵面 目前先进飞机采用 提高可靠性：余度配置技术，自动故障排除技术 捷联式惯性导航系统： 数字平台 平台式惯性导航： 机电陀螺平台 全向信标系统： 测量相位差 近距，测向 航天测控系统分类不选月球 民航着陆导航系统：仪表和微波 仪表着陆系统： 组成不选方位台 用于I, II类气象条件 国际民航组织标准：气象条件分为三类 生命保障系统：测温度 测量细节： 飞行过程中测量的状态参数全选 飞行参数选飞行高度，姿态角 轨迹控制是重心，保持或跟踪 飞行高度测量不选直接测量法 飞行速度测量方法不含同位素测量法 压力测速：最简单 雷达测速：测量精度较高 飞行高度不选地面海拔高度 温度测量一般采用间接测量 变形测量采用弹性元件 图片题： 第五章 561~718特定飞行器： 嫦娥1号探测方式：环月探测 嫦娥3号着陆方式：着陆腿 嫦娥3号探测方式：软着陆巡视探测 玉兔车组成不选挖掘臂 和平号实验舱有5个舱室(peace 5个字母)，创下人类外太空生活最长记录(长久的和平) 美国凤凰号探测方式：着陆定点 美国航天飞机： 轨道器飞行30天左右 最多承载10人 发射初始阶段动力由助推器和主发动机提供 可重复使用的是助推火箭和轨道器 轨道器结构包括选全部 着陆方式是无动力滑翔（滑翔机无动力装置！） 航天器相关： 空间探测器： 着陆方式不选阻力伞 探测方式全选 空中吊车式着陆最大优点是冲击小 着陆腿式着陆最大优点是精准，主要缺点选倾覆和环境限制 气囊弹跳式最大优点是适应各种变化 载人飞船： 舱段全选 逃逸舱是指应急舱 核心是乘员返回舱 登月载人飞船： 不选轨道舱 登月舱由下降级和上升级组成 轨道舱： 是工作舱段 特点不选有电源 放置实验仪器 服务舱有装推进系统 返回舱： 组成不选推进系统 大端不和轨道舱相连（是小端相连） 是控制中心 对接舱用来对接 导弹相关： 导弹制导方式全选 制导系统是指准确飞向目标 弹道控制方式不选翼面 弹道导弹分类选战术和战略 战略导弹分类全选 弹道导弹飞行过程先发动机后惯性 导弹战斗部： 组成不选弹身（单身不能战斗） 功用是摧毁目标 气动外形和飞行弹道分类是有翼和弹道 有翼导弹弹体包括不选起落装置 高机动性导弹X形弹翼 巡航导弹平面形弹翼 巡航导弹采用空气喷气发动机 导弹按发射地点分类选地对地和空对地 母弹头和子弹头： 都装推进系统：机动式 母装子不装：分导式 都没有：集束式 起落相关： 起落装置作用不选空中飞行 后三点起落架： 优点选安装尾轮和迎角大（欢迎安装） 缺点不选尾轮 前三点起落架： 优点不选前轮 缺点选带前的两个 重心在前上 自行车式起落架： 特点选前轮转弯装置和不易离地 采用前轮转弯装置转弯 轮式起落架作用选减小距离和机动性 多轮小车式起落架： 作用选减小压力 机安-225用了32个轮胎 多支点多轮小车式起落架目的是既…也… 机轮式起落装置使用最广泛 起落架减震方式全选（全面抗震） 减震器作用： 单选选吸收冲击能量 多选不选加长度 机轮作用选地面运动 直升机尾桨类型不选自动倾斜器 直升机自动倾斜器： 倾斜不选桨距 上下移动选浆距和上下 双垂直尾翼是增大方向静稳定性 米格的纠偏机构解决机轮定向归位问题 机身机翼相关： 飞行器结构包括选受力部件和支撑构件 机身不选升力和椭圆 机身典型构造不选复合式 机身和机翼不同之处选腹板和隔框 机翼典型构造不选复合式 机翼基本受力构件全选 机翼外载荷选两个质量 机翼作用选升力和稳定性 整体壁板式机翼特点不选复合材料 薄壁构造机翼是指蒙皮骨架式 蒙皮作用不选开挂 美国某个飞机蒙皮性能很好选蜂窝夹层结构蒙皮 纵墙： 承受剪力 多选选不承受弯矩和铰链连接 翼梁： 承受大部分弯矩和剪力 不选铰链连接 最强有力的纵向构件 翼肋选形状和开孔 桁条选支撑蒙皮和传递力 构造相关： 结构材料不选黑色金属 B787和A350XWB复合材料占50%以上（吃不吃小王八） 强度指抵抗破坏的能力 刚度指抵抗变形的能力 飞行器结构满足要求全选 铝合金应用最广泛 镁合金提及质量最小 航天器按功能分类选专用系统和保障系统 航天器专有系统选电视摄像和通信转发 航天器保障系统不选试验设备 卫星外壳不选气动外形 图片题： 第六章 719~802第六章内容很杂，已分散整理到前五章。 by Doxel","link":"/2023/05/28/%E8%88%AA%E6%A6%82%E6%9C%9F%E6%9C%AB%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/"},{"title":"比起深夜，现在的我更喜欢清晨——写在「咬住秒针」五周年","text":"高中时喜欢上一个乐队，名字叫「永远是深夜有多好。」 这个名字有点长，有种轻小说标题的既视感，我还是更习惯叫作「真夜中」。说是乐队，其实只有acane一个人而已，只不过每一首歌她都会邀请很多人参与。 五年前的今天，真夜中投稿了第一首歌「咬住秒针」。咬住秒针，也就是停住时间嘛，这样就可以永远留在深夜了。 我很喜欢很喜欢真夜中的歌，也很喜欢很喜欢深夜。深夜的大街往往空无一人，四周环绕着无限的安静。昏暗的灯光漂浮着，让深夜漫步的人倍感安心。 说到深夜，我还有一部很喜欢的动画，叫「彻夜之歌」。中学生夜守光，吸血鬼七草荠，在一个夜晚相遇。失眠的少年和昼伏夜出的吸血鬼，每晚都会在城市的星空下遨游。 在人们熟睡时，悄悄走出家门，独享一个空旷的夜晚。深夜真的很美好啊。 我住的镇子，晚上九点的街道就只剩零星几个人了。十点左右，大家差不多都入睡了。这时出门夜游，可以尽情地被黑夜包裹。 不过自从我考到北京读书，就不怎么喜欢深夜了。 这里的深夜太可怕了。宿舍里，大家在赶作业，或者复习考试，午夜十二点也不熄灯。街道上，即使是凌晨一二点，还是能看到很多刚从自习室走出的同学。校外也是一样，各式各样的高楼大厦，工位上永远亮着灯。 我天真的以为老师这一辈会睡得早一点，结果他们也直到午夜不睡觉，还会在凌晨向微信群里发通知。 这里的深夜是忙碌的。 你们不困吗？应该是挺困的。毕竟没有课的时候，舍友早上会睡到十点才起床，中午会睡到下午四点再起床。 深夜独有的安心感荡然无存了，可能这就是大城市吧。 不过，我发现清晨可以当作深夜的代餐。 如果六点起床的话，会看到一个完全不一样的校园。喜鹊和斑鸠取代了匆忙的行人，在草坪上慢悠悠地踱步。四周也安静得很，毕竟大伙都在睡觉呢。假如是冬天，那就更好了。天还没有亮，路灯也不会关。深夜原本的样貌在清晨重现了。 与深夜的安心感不同，清晨会给人一种希望感。 大概到七点半吧，路上的人会慢慢多起来。因为第一节课要开始了。 比起深夜，现在的我更喜欢清晨。毕竟深夜已经慢慢不属于自己了。 我以后会不会永远失去自己的深夜呢？我觉得大概率会。我想有个不算太小的房子住，想养只猫，想去现场看真夜中的演唱会，想买彻夜之歌的漫画。想要这些的话，就得丢掉自己的深夜，拼命学习找到好工作，然后打工赚钱才拿得到吧？没办法，又没别的路可走。 虽然不再喜欢深夜，但我还是喜欢真夜中的歌。最后以咬住秒针的歌词作个结尾，「只能不明就里地继续前进了」。","link":"/2023/06/04/%E7%8E%B0%E5%9C%A8%E6%88%91%E6%9B%B4%E5%96%9C%E6%AC%A2%E6%B8%85%E6%99%A8/"}],"tags":[{"name":"计算机组成","slug":"计算机组成","link":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"MIPS","slug":"MIPS","link":"/tags/MIPS/"},{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"},{"name":"工科大学物理","slug":"工科大学物理","link":"/tags/%E5%B7%A5%E7%A7%91%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86/"},{"name":"Verilog","slug":"Verilog","link":"/tags/Verilog/"},{"name":"科研课堂","slug":"科研课堂","link":"/tags/%E7%A7%91%E7%A0%94%E8%AF%BE%E5%A0%82/"},{"name":"分离式内存","slug":"分离式内存","link":"/tags/%E5%88%86%E7%A6%BB%E5%BC%8F%E5%86%85%E5%AD%98/"},{"name":"航空航天概论","slug":"航空航天概论","link":"/tags/%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E6%A6%82%E8%AE%BA/"},{"name":"永远是深夜有多好。","slug":"永远是深夜有多好。","link":"/tags/%E6%B0%B8%E8%BF%9C%E6%98%AF%E6%B7%B1%E5%A4%9C%E6%9C%89%E5%A4%9A%E5%A5%BD%E3%80%82/"}],"categories":[{"name":"学习","slug":"学习","link":"/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"测试","slug":"测试","link":"/categories/%E6%B5%8B%E8%AF%95/"},{"name":"阅读","slug":"阅读","link":"/categories/%E9%98%85%E8%AF%BB/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"}]}